name: Deploy PR Preview

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Deploy to PR preview directory
        run: |
          # Create preview directory for this PR
          PR_NUMBER=${{ github.event.pull_request.number }}
          PREVIEW_DIR="gh-pages/pr-preview/pr-${PR_NUMBER}"

          # Remove old preview if exists
          rm -rf "${PREVIEW_DIR}"

          # Create directory structure
          mkdir -p "${PREVIEW_DIR}"

          # Copy website files (excluding .git, .github, and gh-pages directory)
          rsync -av --exclude='.git' --exclude='.github' \
            --exclude='gh-pages' --exclude='*.md' ./ "${PREVIEW_DIR}/"

          # Configure git
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit and push changes
          git add .
          git commit -m "Deploy preview for PR #${PR_NUMBER}" \
            || echo "No changes to commit"
          git push origin gh-pages

      - name: Comment PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = '${{ github.repository_owner }}';
            const repo = '${{ github.event.repository.name }}';
            const previewUrl = `https://${owner}.github.io/${repo}/pr-preview/pr-${prNumber}/`;

            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview environment')
            );

            const commentBody = `## ðŸš€ Preview environment deployed!
            
            **ðŸ“± View your changes live:**
            ### [${previewUrl}](${previewUrl})
            
            This preview will be automatically updated when you push new commits to this PR.
            
            ---
            *Preview environments are cleaned up when the PR is closed or merged.*`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
